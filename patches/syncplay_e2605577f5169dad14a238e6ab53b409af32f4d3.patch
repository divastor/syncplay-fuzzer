diff --git a/syncplay/protocols.py b/syncplay/protocols.py
index 7e780a5..9bfe2da 100755
--- a/syncplay/protocols.py
+++ b/syncplay/protocols.py
@@ -16,7 +16,8 @@ from syncplay.messages import getMessage
 from syncplay.utils import meetsMinVersion
 
 
-class JSONCommandProtocol(LineReceiver):
+# class JSONCommandProtocol(LineReceiver):
+class JSONCommandProtocol():
     def handleMessages(self, messages):
         for message in messages.items():
             command = message[0]
@@ -56,11 +57,12 @@ class JSONCommandProtocol(LineReceiver):
 
     def sendMessage(self, dict_):
         line = json.dumps(dict_)
-        self.sendLine(line.encode('utf-8'))
+        # self.sendLine(line.encode('utf-8'))
         self.showDebugMessage("client/server >> {}".format(line))
 
     def drop(self):
-        self.transport.loseConnection()
+        pass
+        # self.transport.loseConnection()
 
     def dropWithError(self, error):
         raise NotImplementedError()
@@ -410,7 +412,7 @@ class SyncServerProtocol(JSONCommandProtocol):
 
     def __hash__(self):
         return hash('|'.join((
-            self.transport.getPeer().host,
+            'localhost',#self.transport.getPeer().host,
             str(id(self)),
         )))
 
@@ -426,7 +428,7 @@ class SyncServerProtocol(JSONCommandProtocol):
         pass
 
     def dropWithError(self, error):
-        print(getMessage("client-drop-server-error").format(self.transport.getPeer().host, error))
+        # print(getMessage("client-drop-server-error").format(self.transport.getPeer().host, error))
         self.sendError(error)
         self.drop()
 
@@ -514,7 +516,7 @@ class SyncServerProtocol(JSONCommandProtocol):
         hello = {}
         username = self._watcher.getName()
         hello["username"] = username
-        userIp = self.transport.getPeer().host
+        userIp = None # self.transport.getPeer().host
         room = self._watcher.getRoom()
         if room:
             hello["room"] = {"name": room.getName()}
@@ -707,7 +709,7 @@ class SyncServerProtocol(JSONCommandProtocol):
                     self._factory.updateTLSContextFactory()
                 if self._factory.options is not None:
                     self.sendTLS({"startTLS": "true"})
-                    self.transport.startTLS(self._factory.options)
+                    # self.transport.startTLS(self._factory.options)
                 else:
                     self.sendTLS({"startTLS": "false"})
             else:
